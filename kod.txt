const main_questions = {
  id: "main_questions",
  name: "main_questions",
  type: "select",
  options: [
    {
      value: "uluslararasi_makale",
      text: "Uluslararası Makale",
    },
    {
      value: "ulusal_makale",
      text: "Ulusal Makale",
    },
    {
      value: "tezden_uretilmis_yayin",
      text: "Tezden Üretilmiş Yayın",
    },
    {
      value: "kitap",
      text: "Kitap",
    },
    {
      value: "patent",
      text: "Patent",
    },
    {
      value: "atiflar",
      text: "Atıflar",
    },
    {
      value: "lisansustu_tez_danismanligi",
      text: "Lisansüstü Tez Danışmanlığı",
    },
    {
      value: "bilimsel_arastirma_projeleri",
      text: "Bilimsel Araştırma Projeleri",
    },
    {
      value: "bilimsel_toplanti_faliyeti",
      text: "Bilimsel Toplantı Faliyeti",
    },
    {
      value: "egitim_ogretim_faliyeti",
      text: "Eğitim Öğretim Faliyeti",
    },
  ],
};

const uluslararasi_makale = {
  yurtdisi: getYurtdisi("Yabancı uyruklu musunuz veya yurtdışı doçentlik denkliği başvurusu yaptınız mı?", ["Evet", "Hayır"]),
  yayin: getYayin("1. Uluslararası Makale", [
    "A) SSCI, SCI, SCI- Expanded veya AHCI kapsamındaki dergilerde yayımlanmış özgün araştırma makalesi",
    "B) Uluslararası alan indeksleri tarafından taranan (a bendinde belirtilen indeksler dışındaki indekslerde yer alan) dergilerde yayımlanmış özgün araştırma makalesi",
    "C) a bendi kapsamındaki dergilerde yayımlanan vak'a takdimi",
  ]),
  zamanlama: getZamanlama("Eser Doktora Öncesi mi veya Doktora Sonrası mı?", [
    "Doktora Öncesi",
    "Doktora Sonrası",
  ]),
  toplam_yazar: getToplamYazar("Eserdeki Toplam Yazar Sayısı"),
  sira: getSira("Kaçıncı Sıradasınız"),
};

const ulusal_makale = {
  yayin: getYayin("2. Ulusal Makale", [
    "ULAKBİM tarafından taranan ulusal hakemli dergilerde yayımlanmış özgün araştırma makalesi ",
  ]),
  yazar_sayisi: getYazarSayisi("Eserdeki Toplam Yazar Sayısı"),
  zamanlama: getZamanlama("Eser Doktora Öncesi mi veya Doktora Sonrası mı", [
    "Doktora Öncesi",
    "Doktora Sonrası",
  ]),
  sira: getSira("Kaçıncı Sıradasınız"),
};

const tezden_uretilmis_yayin = {
  yayin: getYayin("Lisansüstü veya Tıpta Uzmanlık Tezlerinden Üretilmiş Yayınlar", [
    "SCI, SCI-Expanded, SSCI veya AHCI kapsamındaki dergilerde yayımlanmış makale",
    "Diğer uluslararası ve ulusal hakemli dergilerde yayımlanmış makale",
    "Uluslararası sempozyumda/kongrede sunulmuş ve tam metni basılmış alanında bilime katkı sağlayan sözlü bildiri",
    "Ulusal sempozyumda/kongrede sunulmuş ve tam metni basılmış alanında bilime katkı sağlayan sözlü bildiri ",
  
  ]),
  zamanlama: getZamanlama("Eser Doktora Öncesi mi veya Doktora Sonrası mı", [
    "Doktora Öncesi",
    "Doktora Sonrası",
  ]),
  yazar_sayisi: getYazarSayisi("Eserdeki Toplam Yazar Sayısı"),
  sira: getSira("Kaçıncı Sıradasınız", true),
};

const kitap = {
  kitap: getKitap("4. Kitap", [
    "Uluslararası yayınevleri tarafından yayımlanmış kitap",
    "Uluslararası yayınevleri tarafından yayımlanmış kitap editörlüğü veya bölüm yazarlığı",
    "Ulusal yayınevleri tarafından yayımlanmış kitap",
    "Ulusal yayınevleri tarafından yayımlanmış kitap editörlüğü veya bölüm yazarlığı ",
  ]),
  zamanlama: getZamanlama("Eser Doktora Öncesi mi veya Doktora Sonrası mı", [
    "Doktora Öncesi",
    "Doktora Sonrası",
  ]),
  yazar_sayisi: getYazarSayisi("Eserdeki Toplam Yazar Sayısı"),
};

const patent = {
  patent: getPatent("5. Patent ", ["Uluslararası Patent", "Ulusal Patent"]),
  zamanlama: getZamanlama("Eser Doktora Öncesi mi veya Doktora Sonrası mı", [
    "Doktora Öncesi",
    "Doktora Sonrası",
  ]),
  kisi: getKisi("Kişi Sayısı")
};

const atiflar = {
  atif: getAtif("6. Atıflar", [
    "SCI, SCI-Expanded, SSCI ve AHCI tarafından taranan dergilerde adayın yazar olarak yer almadığı yayınlardan her birinde, metin içindeki atıf sayısına bakılmaksızın adayın atıf yapılan her eseri için",
    ") SCI, SCI-Expanded, SSCI ve AHCI dışındaki endeksler tarafından taranan dergilerde adayın yazar olarak yer almadığı yayınlardan her birinde, metin içindeki atıf sayısına bakılmaksızın adayın atıf yapılan her eseri için ",
    " Ulusal hakemli dergilerde; adayın yazar olarak yer almadığı yayınlardan her birinde, metin içindeki atıf sayısına bakılmaksızın adayın atıf yapılan her eseri için",
  ]),
  zamanlama: getZamanlama("Doktora Öncesi mi veya Doktora Sonrası mı", [
    "Doktora Öncesi",
    "Doktora Sonrası",
  ]),
  atif_sayisi: getAtifSayisi("Atıf Sayısı"),
};

const lisansustu_tez_danismanligi = {
  unvan: getUnvan("Geçerli Açıklama", ["Doktora", "Yüksek Lisans"]),
  zamanlama: getZamanlama("Gerekli Açıklama", [
    "Doktora Öncesi",
    "Doktora Sonrası",
  ]),
  danisman_sira: getDanismanSira("Geçerli Açıklama"),
};


const bilimsel_arastirma_projeleri = {
  proje_tipi: getProjeTipi("8. Bilimsel Araştırma Projeleri", [
    ") Devam eden veya başarı ile tamamlanmış AB Çerçeve Programı bilimsel araştırma projesinde koordinatör/baş araştırmacı olmak",
    "Devam eden veya başarı ile tamamlanmış AB Çerçeve Programı bilimsel araştırma projesinde ortak araştırmacı olmak",
    "Devam eden veya başarı ile tamamlanmış a ve b bendi dışındaki uluslararası destekli bilimsel araştırma projelerinde (derleme ve rapor hazırlama çalışmaları hariç) görev almak",
    "Üniversite dışındaki kamu kurumlarıyla yapılan başarıyla tamamlanmış veya devam eden bilimsel araştırma projelerinde görev almak",
  ]),
};

const bilimsel_toplanti_faliyeti = {
  bildiri: getBildiri("9. Bilimsel Toplantı Faaliyeti (Başvurulan bilim alanı ile ilgili ve adayın hazırladığı lisansüstü tezlerden üretilmemiş olmak kaydıyla)", [
    "Uluslararası bilimsel toplantılarda sunulan (poster hariç), tam metni veya özeti matbu veya elektronik olarak bildiri kitapçığında yayımlanmış çalışmalar",
    "Ulusal bilimsel toplantılarda sunulan (poster hariç), tam metni veya özeti matbu veya elektronik olarak bildiri kitapçığında yayımlanmış çalışmalar",
  ]),
  yazar_sayisi: getYazarSayisi("Yazar Sayısı"),
};

const egitim_ogretim_faliyeti = {
  ogretim_faliyeti: getOgretimFaliyeti("10. Eğitim-Öğretim Faaliyeti", [
    "Bir dönem yüksek lisans, doktora veya doktoraya eşdeğer uzmanlık dersi",
    "Bir dönem önlisans veya lisans dersi",
  ]),
  zamanlama: getZamanlama("Eser Doktora Öncesi mi veya Doktora Sonrası mı?", [
    "Doktora Öncesi",
    "Doktora Sonrası",
  ])
};

const easy_way_out = {
  uluslararasi_makale: function () {
    console.log($SUB_QUESTION_STEP_HELPER)
  }
}

const sub_questions = {
  uluslararasi_makale,
  ulusal_makale,
  tezden_uretilmis_yayin,
  kitap,
  patent,
  atiflar,
  lisansustu_tez_danismanligi,
  bilimsel_arastirma_projeleri,
  bilimsel_toplanti_faliyeti,
  egitim_ogretim_faliyeti,
};

const requirements = {
  uluslararasi_makale: {
    func: function () {
      let result = [];

      let all = $OUTPUT_DATA.filter((data) => {
        return (
          data.main_questions == "uluslararasi_makale" &&
          (data.yayin == 0 || data.yayin == 1 || data.yayin == 2)
        );
      });

      let sum = all.reduce((a, b) => a + b.point, 0);

      if (sum < 40) {
        result.push(
          "Bu maddeden en az 40 puan alınmalıdır"
        );
      }
      let findBaslica = $OUTPUT_DATA.find((data) => {
        return (
          data.main_questions == "uluslararasi_makale" &&
          (data.yayin == 0 && data.sira == 1)
        );
      });

      if (!findBaslica) {
        result.push("Bu maddenin A bendi kapsamında en az bir makalede başlıca yazar olmak gerekmektedir.")
      }

      return result;
    },
  },
  ulusal_makale: {
    func: function () {
      let result = [];
  
      let all = $OUTPUT_DATA.filter((data) => {
        return (
          data.main_questions == "ulusal_makale" &&
          (data.zamanlama == 1 || data.zamanlama == 0) &&
          data.yayin == 0
        );
      });
  
      let sum = all.reduce((a, b) => a + b.point, 0);
  
      if (sum < 8) {
        result.push(
          "Bu maddenin a bendi kapsamında en az 8 puan alınmalıdır."
        );
      }
  
      // Yeni özellik: en az 3 yayın yapmak zorunludur, ikisi a bendi kapsamında olmalıdır.
      let a_bendi_count = all.filter((data) => data.a_bendi === true).length;
      if (all.length < 3 || a_bendi_count < 2) {
        result.push(
          "İkisi bu maddenin a bendi kapsamında olmak üzere en az üç yayın yapmak zorunludur."
        );
      }
  
      return result;
    }
  }
  
  },
  tezden_uretilmis_yayin: {
    max: 10,
    func: function () {
      let result = [];

      let all = $OUTPUT_DATA.filter((data) => {
        return (
          data.main_questions == "tezden_uretilmis_yayin" &&
          data.zamanlama == 1
        );
      });

      let sum = all.reduce((a, b) => a + b.point, 0);

      if (all.length < 1) {
        result.push(
          "Bu madde kapsamında en az 1 yayın zorunludur. Bu maddeden en fazla 10 puan alınabilir"
        );
      }

      return result;
    }
  },
  kitap: {
    max: 20
  },
  atiflar: {
    max: 20,
    func: function () {
      let result = [];
      let all = $OUTPUT_DATA.filter((data) => {
        return (
          data.main_questions == "atiflar" &&
          (data.zamanlama == 1 || data.zamanlama == 0) &&
          (data.atif == 0 ||
            data.atif == 1 ||
            data.atif == 2)
        );
      });
      let sum = all.reduce((a, b) => a + b.point, 0);
      if (sum < 4) {
        result.push(
          "Bu madde kapsamında en az 4 puan alınması zorunludur. Bu madde kapsamında en fazla 20 puan alınabilir"
        );
      }

      return result;
    }
  },
  lisansustu_tez_danismanligi: {
    max: 10
  },
  bilimsel_arastirma_projeleri: {
    max: 20
  },
  bilimsel_toplanti_faliyeti: {
    max: 10,
    func: function () {
      let result = [];

      let all = $OUTPUT_DATA.filter((data) => {
        return (
          data.main_questions == "bilimsel_toplanti_faliyeti" &&
          data.zamanlama == 1 &&
          data.bildiri == 0 &&
          data.bildiri == 1
        );
      });

      let sum = all.reduce((a, b) => a + b.point, 0);

      if (sum < 5) {
        result.push(
          "Bu madde kapsamında en az 5 puan almak zorunludur, en fazla 10 puan alınabilir. Aynı toplantıda sunulan en fazla bir bildiri puanlanır."
        );
      }

      return result;
    }
  },
  egitim_ogretim_faliyeti: {
    max: 4,
    func: function () {
      let result = [];

      let all = $OUTPUT_DATA.filter((data) => {
        return (
          data.main_questions == "bilimsel_toplanti_faliyeti" &&
          data.zamanlama == 1 &&
          data.egitim_ogretim_faliyeti == 0 &&
          data.egitim_ogretim_faliyeti == 1
        );
      });

      let sum = all.reduce((a, b) => a + b.point, 0);

      if (sum < 2) {
        result.push(
          "Bu madde kapsamında en az 2 puan almak zorunludur, ancak en fazla 4 puan alınabilir. Yurtiçi veya YÖK tarafından tanınan yurtdışı yükseköğretim kurumlarında en az 2 yıl eğitim ve öğretim faaliyetinde bulunanlar 2 puan almış sayılır."
        );
      }

      return result;
    }
  }
};

const calculator_functions = {
  uluslararasi_makale: function (data) {
    let point;
    let multiplier;

    switch (data.yayin) {
      case "0":
        point = 20;
        break;
      case "1":
        point = 10;
        break;
      case "2":
        point = 5;
        break;
    }

    if (data.toplam_yazar == 1) {
      multiplier = 1.0;
    } else if (data.toplam_yazar == 2) {
      if (data.sira == 1) {
        multiplier = 0.8;
      } else {
        multiplier = 0.5;
      }
    } else {
      if (data.sira == 1) {
        multiplier = 0.5;
      } else {
        multiplier = 0.5 / parseFloat(data.toplam_yazar - 1);
      }
    }

    point = point * multiplier;
    return point;
  },
  ulusal_makale: function (data) {
    let point;
    let multiplier;
    switch (data.yayin) {
      case "0":
        point = 8;
        break;
    }

    if (data.yazar_sayisi == 1) {
      multiplier = 1.0;
    } else if (data.yazar_sayisi == 2) {
      if (data.sira == 1) {
        multiplier = 0.8;
      } else {
        multiplier = 0.5;
      }
    } else {
      if (data.sira == 1) {
        multiplier = 0.5;
      } else {
        multiplier = 0.5 / parseFloat(data.yazar_sayisi - 1);
      }
    }

    point = point * multiplier;
    return point;
  },
  
  tezden_uretilmis_yayin: function (data) {
  let point;
  let multiplier;

  switch (data.yayin) {
    case "0":
      point = 10;
      if (data.yazar_sayisi == 1) {
        multiplier = 1.0;
      } else if (data.yazar_sayisi == 2) {
        if (data.sira == 1) {
          multiplier = 0.8;
        } else {
          multiplier = 0.5;
        }
      } else {
        if (data.sira == 1) {
          multiplier = 0.5;
        } else {
          multiplier = 0.5 / parseFloat(data.yazar_sayisi - 1);
        }
      }
      break; // Bu satırı ekleyin
    case "1":
      point = 5;
      if (data.yazar_sayisi == 1) {
        multiplier = 1.0;
      } else if (data.yazar_sayisi == 2) {
        if (data.sira == 1) {
          multiplier = 0.8;
        } else {
          multiplier = 0.5;
        }
      } else {
        if (data.sira == 1) {
          multiplier = 0.5;
        } else {
          multiplier = 0.5 / parseFloat(data.yazar_sayisi - 1);
        }
      }
      break; // Bu satırı ekleyin
    case "2":
      point = 5;
      multiplier = 1.0 / parseFloat(data.yazar_sayisi);
      break; // Bu satırı ekleyin
    case "3":
      point = 3;
      multiplier = 1.0 / parseFloat(data.yazar_sayisi);
      break; // Bu satırı ekleyin
  }
  point = point * multiplier;
  return point;
},

  
  kitap: function (data) {
    let point, multiplier;
    switch (data.kitap) {
      case "0":
        point = 20;
        break;
      case "1":
        point = 10;
        break;
      case "2":
        point = 15;
        break;
      case "3":
        point = 8;
        break;
    }

    multiplier = 1.0 / parseFloat(data.yazar_sayisi);
    point = point * multiplier;
    return point;
  },
  patent: function (data) {
    let point
    let multiplier;
    console.log(data)
    switch (data.patent) {
      case "0":
        console.log('burada')
        point = 20;
        break;
      case "1":
        point = 10;
        break;
    }

    multiplier = 1.0 / parseFloat(Number(data.kisi));
    console.log(multiplier, point)
    point = point * multiplier;
    console.log(multiplier, point)
    console.log(point)
    return point;
  },
  atiflar: function (data) {
    let point, multiplier;
    switch (data.atif) {
      case "0":
        point = 3;
        break;
      case "1":
        point = 2;
        break;
      case "2":
        point = 1;
        break;
    }

    multiplier = parseFloat(data.atif_sayisi);
    point = point * multiplier;
    return point;
  },
  
  lisansustu_tez_danismanligi: function (data) {
    let point, multiplier;
    switch (data.unvan) {
      case "0":
        point = 4;
        break;

      case "1":
        point = 2;
        break;
    }

    if (data.danisman_sira == 1) {
      multiplier = 1.0;
    } else {
      multiplier = 0.5;
    }

    point = point * multiplier;
    return point;
  },
  bilimsel_arastirma_projeleri: function (data) {
    let point, multiplier;
    switch (data.proje_tipi) {
      case "0":
        point = 15;
        break;
      case "1":
        point = 10;
        break;
      case "2":
        point = 6;
        break;
      case "3":
        point = 4;
        break;
    }

    multiplier = 1.0;

    point = point * multiplier;

    return point;
  },
  
  bilimsel_toplanti_faliyeti: function (data) {
    let point, multiplier;
    switch (data.bildiri) {
      case "0":
        point = 3;
        break;

      case "1":
        point = 2;
        break;
    }

    multiplier = 1.0 / parseFloat(data.yazar_sayisi);
    point = point * multiplier;
    return point;
  },
  egitim_ogretim_faliyeti: function (data) {
    let point;
    switch (data.ogretim_faliyeti) {
      case "0":
        point = 3;
        break;
      case "1":
        point = 2;
        break;
    }

    return point;
  },
};
